{"version":3,"file":"override.js","sourceRoot":"","sources":["../src/override/override.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAE1C,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAGhD,IAAa,cAAc,GAA3B,MAAa,cAAe,SAAQ,UAAU;IAQ5C,kBAAkB;;QAChB,IAAI,CAAC,IAAI,CAAC,UAAU;YAAE,OAAO;QAC7B,MAAM,QAAQ,GAAG,MAAA,MAAA,IAAI,CAAC,UAAU,0CAAE,aAAa,CAAC,MAAM,CAAC,0CAAE,aAAa,CAAC,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;QACzF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEQ,YAAY,CAAC,kBAAwC;QAC5D,aAAa;QACb,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAmB,CAAC;QAE9D,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,OAAO,CAAC,CAAC,SAAsB,EAAE,EAAE;YAC7C,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;YAC1C,aAAa;YACb,IAAI,SAAS,IAAI,SAAS,CAAC,UAAU,IAAI,SAAS,CAAC,UAAU,CAAC,kBAAkB,KAAK,SAAS,EAAE;gBAC9F,aAAa;gBACb,SAAS,CAAC,UAAU,CAAC,kBAAkB,GAAG,CAAC,GAAG,SAAS,CAAC,UAAU,CAAC,kBAAkB,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;aACjH;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;;KAEV,CAAC;IACJ,CAAC;CACF,CAAA;AA/BiB,qBAAM,GAAG;IACvB,GAAG,CAAA;;KAEF;CACD,CAAA;AANS,cAAc;IAD1B,aAAa,CAAC,iBAAiB,CAAC;GACpB,cAAc,CAiC1B;SAjCY,cAAc","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport type { PropertyValues } from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\n@customElement('override-styles')\nexport class OverrideStyles extends LitElement {\n\n  static override styles = [\n    css` \n      :host { color: pink; }\n    `\n  ];\n\n  getSlottedElements() {\n    if (!this.renderRoot) return;\n    const elements = this.renderRoot?.querySelector('slot')?.assignedNodes({ flatten: true});\n    return elements;\n  }\n\n  override firstUpdated(_changedProperties: PropertyValues<this>) {\n    // @ts-ignore\n    const myElements = this.getSlottedElements() as HTMLElement[];\n\n    myElements?.forEach((myElement: HTMLElement) => {\n      console.log('myElement - one', myElement);\n      // @ts-ignore\n      if (myElement && myElement.shadowRoot && myElement.shadowRoot.adoptedStyleSheets !== undefined) {\n        // @ts-ignore\n        myElement.shadowRoot.adoptedStyleSheets = [...myElement.shadowRoot.adoptedStyleSheets, this.constructor.styles];\n      }\n    });\n  }\n\n  override render() {\n    return html`\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'override-styles': OverrideStyles;\n  }\n}\n"]}